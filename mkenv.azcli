#Login
az login 
az account set --subscription f2ca3d4d-05e5-4001-a135-49839f1ea51f

#Resource Groups
userid=$(whoami)
resourceGroupName="invincible-$userid-eastus"
az group create --name $resourceGroupName --location eastus

# Create the CosmosDB account; regions are hard-coded   
cosmosAccountName="invincible-$userid-cosmos"
az cosmosdb create \
    -n $cosmosAccountName \
    -g $resourceGroupName \
    --default-consistency-level Session \
    --enable-multiple-write-locations true \
    --enable-automatic-failover true \
    --kind=MongoDB \
    --locations regionName=eastus failoverPriority=0 isZoneRedundant=True \
    --locations regionName=westeurope failoverPriority=1 isZoneRedundant=True \
    --locations regionName=southeastasia failoverPriority=2 isZoneRedundant=True

# Create a MongoDB database and container
databaseName="invincible-db"
az cosmosdb mongodb database create \
    -a $cosmosAccountName \
    -g $resourceGroupName \
    -n $databaseName

# Retrieve database user, password, and connection string
mongoDbConnectionString=$(az cosmosdb list-connection-strings \
    -n $cosmosAccountName \
    -g $resourceGroupName \
    --query "connectionStrings[?description == 'Primary MongoDB Connection String'].connectionString" \
    --output tsv)

# Create webapps in a loop
for location in eastus westeurope southeastasia
do
    # Create an App Service for the WebApp
    appServiceName="invincible-$userid-appservice-$location"

    az appservice plan create \
        -g $resourceGroupName \
        -n $appServiceName \
        -l $location \
        --is-linux

    # Create the webapp definitions
    appName="invincible-app-$userid-$location"

    site=$(az webapp create \
        -g $resourceGroupName \
        -p $appServiceName \
        -n $appName \
        -r 'NODE|12.9' \
        --query hostNames \
        --output tsv)

    # Set database connection string as an environment variable on the webapp servers
    az webapp config appsettings set \
        -g $resourceGroupName \
        -n $appName \
        --settings DB_CONN="$mongoDbConnectionString"

done

az extension add --name front-door

# Create the front door
frontDoorName="invincible-$userid-fd"
az network front-door create \
    --backend-address "invincible-app-$userid-eastus.azurewebsites.net" \
    -n $frontDoorName \
    -g $resourceGroupName

# Assign additional Web Apps as an Endpoint for high-availabilty; use default backend pool name
az network front-door backend-pool backend add \
    --address "invincible-app-$userid-westeurope.azurewebsites.net" \
    -f $frontDoorName \
    --pool-name DefaultBackendPool \
    -g $resourceGroupName

az network front-door backend-pool backend add \
    --address "invincible-app-$userid-southeastasia.azurewebsites.net" \
    -f $frontDoorName \
    --pool-name DefaultBackendPool \
    -g $resourceGroupName

# Probe every 5 seconds (the minimum) rather than the default 30 seconds
az network front-door probe update \
    -f $frontDoorName \
    --interval 5 \
    -n DefaultProbeSettings \
    -g $resourceGroupName

# Set the failure settings to be very strict
newLoadBalancingSettingsId=$(az network front-door load-balancing create \
    -f $frontDoorName \
    -n NewLoadBalancingSettings \
    -g $resourceGroupName \
    --sample-size 1 \
    --successful-samples-required 1 \
    --query id \
    --output tsv)

# Update the default load balancing settings to be the new one we just created
az network front-door update \
    -n $frontDoorName \
    -g $resourceGroupName \
    --set backendPools[0].loadBalancingSettings.id="$newLoadBalancingSettingsId"

# Delete the old load balancing setting
az network front-door load-balancing delete \
    -f $frontDoorName \
    -n DefaultLoadBalancingSettings \
    -g $resourceGroupName
